" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 20 July, 2018)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=nvim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set followlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.

set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set runexec

" Selected color scheme

colorscheme Monokai

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=\ %m/%d\ \ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" enable numbers
set number relativenumber

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems

if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look

set statusline="  %t %T %8A %12u:%-7g %10s %24d %=%D %10a Free   "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/
mark g ~/git/
mark p ~/Pictures/
mark d ~/Documents/
mark v ~/Videos/
mark n ~/Nextcloud/
mark D ~/Downloads/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff nvim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep nvim "+grep %a"
command! reload :write | restart
command! z :execute 'cd' "'".fnameescape(system('eval "$(/usr/share/z.lua/z.lua --init zsh)" && _zlua -l %a | tail -n1 | grep -o "[^ ]*$"'))."'"
command! FZFlocate :set noquickview | :execute 'goto' fnameescape(term('locate $HOME | fzf --preview "(bat -p --color=always {} || tree -CF {}) 2> /dev/null | head -200" 2>/dev/tty'))
command! FZFfind :set noquickview | :execute 'goto' fnameescape(term('fd . $HOME | fzf --preview "(bat -p --color=always {} || tree -CF {}) 2> /dev/null | head -200" 2>/dev/tty'))
command! Dragon !dragon-drag-and-drop -x -a %f &
command! DragonTarget !dragon-drag-and-drop -x -t -p | xargs -I _ cp _ %d &

" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filextype *.pdf
    \ {View in Zathura and hide vifm}
    \ devour zathura %c %i &,
    \ {View in Zathura}
    \ zathura %c %i &,
    \ {View in Okular and hide vifm}
    \ devour okular %c %i &,
    \ {View in Okular}
    \ okular %c %i &,
filetype *.pdf fbpdf2 %c
if $DISPLAY == ""
    fileviewer *.pdf pdftotext -nopgbrk %c -
endif

" PostScript
filextype *.ps,*.eps,*.ps.gz
    \ {View in Zathura and hide vifm}
    \ devour zathura %c %i &,
    \ {View in Zathura}
    \ zathura %c %i &,

" Djvu
filextype *.djvu
    \ {View in Zathura and hide vifm}
    \ devour zathura %c %i &,
    \ {View in Zathura}
    \ zathura %c %i &,

" Comic Book Archives
filextype *.cbr
    \ {View in Zathura and hide vifm}
    \ devour zathura %c %i &,
    \ {View in Zathura}
    \ zathura %c %i &,

" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using ffplay and hide vifm}
       \ devour ffplay -nodisp -autoexit %c,
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
fileviewer *.mp3 mp3info
fileviewer *.flac soxi

" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View using mpv and hide vifm}
        \ devour mpv %f 2>/dev/null &,
        \ {View using mpv}
        \ mpv %f 2>/dev/null &,
        \ {View using VLC and hide vifm}
        \ devour vlc %f &,
        \ {View using VLC}
        \ vlc %f &,
        \ {View using ffplay and hide vifm}
        \ devour ffplay -fs -autoexit %f,
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f,
filetype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx]
        \ {View using mpv}
        \ mpv --gpu-context=drm %f


if $DISPLAY == ""
    fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
              \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
              \*.as[fx]
            \ mediainfo %c,
            \ ffprobe -pretty %c 2>&1
endif

" Web
filextype *.html,*.htm
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with qutebrowser}
        \ qutebrowser %f %i &,
        \ {Open with surf}
        \ surf %f %i &,
filetype *.html,*.htm links, lynx
fileviewer *.html lynx -dump %c

" Windows Executables
filextype *.exe
        \ {Open using wine and hide vifm}
        \ devour wine %f &
        \ {Open using wine}
        \ wine %f &

" Object
filetype *.o nm %f | less
fileviewer *.o nm %f

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
        \ {View in sxiv and hide vifm}
        \ devour sxiv -a %f &,
        \ {View in sxiv}
        \ sxiv -a %f &,
        \ {View in Gwenview}
        \ gwenview,
        \ {View in feh}
        \ feh %f &,
        \ {View in imv}
        \ imv -b 1D2330 -d %f &,
filetype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
        \ {View in fbvis}
        \ fbvis %f

if $DISPLAY == ""
    fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.xpm,*.gif
    \ fbvis %c >/dev/null
    \ mediainfo %c
    \ %pc
    \ clear
endif

fileviewer *.pdf
    \ vifmimg pdfpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear
    \ mediainfo %c

fileviewer *.epub
    \ vifmimg epubpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
    \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
    \ vifmimg videopreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear,
    \ mediainfo %c

fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.xpm
    \ vifmimg draw %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.gif
    \ vifmimg gifpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.ico
    \ vifmimg magickpreview %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.mp3
    \ vifmimg audio %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

fileviewer *.otf,*.ttf,*.woff
    \ vifmimg font %px %py %pw %ph %c
    \ %pc
    \ vifmimg clear

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f &,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" sc-im
filextype *.sc
        \ {Edit with SC-IM}
        \ sc-im %f,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype *.torrent transadd %f &
fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ unzip %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tar tar -tf %c

" Rar2FsMount and rar archives
filetype *.rar
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
       \ {Extract here}
       \ unrar %c,
fileviewer *.rar unrar v %c

" IsoMount
filetype *.iso
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype *.7z
       \ {Mount with fuse3-p7zip}
       \ FUSE_MOUNT|fuse3-p7zip %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.7z 7z l %c

" Office files
filextype *.odt,*.odg,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx
        \ {Edit with LibreOffice and hide vifm}
        \ devour libreoffice %f &,
        \ {Edit with LibreOffice}
        \ libreoffice %f &,
fileviewer *.odt odt2txt --width=-1 %c
fileviewer *.doc catdoc %c
fileviewer *.docx docx2txt %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
fileviewer */ tree -CF %c
filextype */
        \ {View in thunar and hide vifm}
        \ devour Thunar %f &,
        \ {View in thunar}
        \ Thunar %f &,
        \ {View in dolphin and hide vifm}
        \ devour dolphin %f &,
        \ {View in dolphin}
        \ dolphin %f &,

" Text, code and everything else i guess (that is not a directory)
" fileviewer *.[ch],*.[ch]pp,*.[ch]xx,*.md,*.py*,*.rs,*.js*,*.css,*.html,*.php,*.sh,Makefile*,*[^../],.*[^../] bat --color always --wrap never --pager never %c -p
fileviewer *[^../],.*[^../]
    \ bat --color always --wrap never --pager never %c -p 2>/dev/null ||
    " probably broken symlink
    \ exa --color always -l %c | cut -d' ' -f7-
filextype *
    \ {Open with XDG-Open}
    \ xdg-open,

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" GETTING ICONS TO DISPLAY IN VIFM
" You need the next 14 lines!

" file types
set classify=' :dir:/, :exe:, :reg:, :link:'
" various file names
set classify+=' ::../::, ::*.sh::, ::*.[hc]pp::, ::*.[hc]::, ::/^copying|license$/::, ::.git/,,*.git/::, ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::, ::*.htm,,*.html,,**.[sx]html,,*.xml::'
" archives
set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.xz,,*.z,,*.zip,,*.zoo::'
" images
set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'
" audio
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
" media
set classify+=' ::*.avi,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
" office files
set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::'

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm runs
" Like in previous versions of vifm
" set vifminfo=options,filetypes,commands,bookmarks,dhistory,state,cs
" Like in vi
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks,tabs

" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.
" set viewcolumns=-{name}..,10{perms}..,7{size}..,7{uname}..,13{mtime}..

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" custom mappings

" unmap space from switching panes
nnoremap <space> <nop>

" Same window switching shortcuts as in vim
nnoremap <C-A-h> <C-w>h
nnoremap <C-A-j> <C-w>j
nnoremap <C-A-k> <C-w>k
nnoremap <C-A-l> <C-w>l

" Fzf mappings
nnoremap <c-g> :FZFlocate<cr>
nnoremap <c-f> :FZFfind<cr>

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in $EDITOR
nnoremap o :!$EDITOR %f<cr>
" Open file in new instance of $EDITOR
nnoremap O :!$TERMINAL -e $EDITOR %f 2>/dev/null &<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Yank current directory path into the clipboard
nnoremap yd :!echo %d | xclip -i -selection clipboard %i<cr>

" Yank current file path into the clipboard
nnoremap yf :!echo %c:p | xclip -i -selection clipboard %i<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Remap cw and cW to make more sense
nnoremap cw cW
nnoremap cW cw

" Open console in current directory
nnoremap <space>T :!$TERMINAL 2>/dev/null &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap <space>c :write | edit $MYVIFMRC | restart<cr>
" Open editor in new terminal to edit vifmrc
nnoremap <space>C :!$TERMINAL -e $EDITOR $MYVIFMRC 2>/dev/null &<cr>

" Toggle wrap setting on <space>w key
nnoremap <space>w :set wrap!<cr>

" Toggle millerview
nnoremap <space>m :set millerview!<cr>

" Toggle millerpreview
nnoremap <space>M :set milleroptions^=rpreview:all<cr>

" Turn off viewcolumns
nnoremap <space>v :set viewcolumns=-{name}..,6{}.<cr>
" Turn on viewcolumns
nnoremap <space>V :set viewcolumns=-{name}..,10{perms}..,7{size}..,7{uname}..,13{mtime}..<cr>

" Open in different program
nnoremap <space>f :file<cr>
nnoremap <space>F :file<cr>j<cr>

" make some shell commands more convenient
nnoremap <space>g :grep<space>

nnoremap <space>d :mkdir<space>

nnoremap <space>t :touch<space>

nnoremap <space>P :move<cr>
nnoremap <space>p :copy<cr>

nnoremap <space>s :nohl<cr>

" open bookmarks menu
nnoremap b :bmarks<cr>

" sync panes
nnoremap zs :sync<cr>
nnoremap zS :sync!<cr>

" set current file as wallpaper
nnoremap W :!setroot -z %f<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" open cd prompt
nnoremap ö :cd<space>

" open z prompt
nnoremap ä :z<space>

" open dragon
nnoremap ü :Dragon<CR>
vnoremap ü :Dragon<CR>
nnoremap Ü :DragonTarget<CR>

" vifmimg scrolling
map > :!vifmimg inc<CR>
map < :!vifmimg dec<CR>

" nnoremap s :!st 2>/dev/null &<CR>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'
set grepprg='rg -n %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername
